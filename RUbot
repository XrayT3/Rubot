#!/usr/bin/python3.4
# -*- coding: utf-8 -*-
import telebot
import datetime
import time
import RUconst
from telebot import types

bot = telebot.TeleBot(RUconst.TOKEN)

now_time = datetime.datetime.now()
day = 'day'
raspisanie = 'raspisanie'
raspisanie2 = 'raspisanie2'
tm = 'tm'
month = 'month'
hour = 4
minute = 20
urok = 1
ur = 'ur'


#–ë–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
def data_and_vremy():
    global day, month, tm, raspisanie, raspisanie2, hour, minute, ur, urok
    now_time = datetime.datetime.now()
    hour = now_time.hour
    minute = now_time.minute
    month = {1: u"–Ø–Ω–≤–∞—Ä—è", 2: u"–§–µ–≤—Ä–∞–ª—è", 3: u"–ú–∞—Ä—Ç–∞", 4: u"–ê–ø—Ä–µ–ª—è", 5: u"–ú–∞—è", 6: u"–ò—é–Ω—è", 7: u"–ò—é–ª—è", 8: u'–ê–≤–≥—É—Å—Ç–∞',
              9: u'–°–µ–Ω—Ç—è–±—Ä—è', 10: u'–û–∫—Ç—è–±—Ä—è', 11: u'–ù–æ—è–±—Ä—è', 12: u'–î–µ–∫–∞–±—Ä—å'}
    today = datetime.date.today()
    month = str((month[today.month]))
    day = str(today.day)
    days = {0: u"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: u"–≤—Ç–æ—Ä–Ω–∏–∫", 2: u"—Å—Ä–µ–¥–∞", 3: u"—á–µ—Ç–≤–µ—Ä–≥", 4: u"–ø—è—Ç–Ω–∏—Ü–∞", 5: u"—Å—É–±–±–æ—Ç–∞",
            6: u"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    tm = (days[datetime.date.today().weekday()])
    if tm == '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        raspisanie = RUconst.Pn
        raspisanie2 = RUconst.Vt
    if tm == '–≤—Ç–æ—Ä–Ω–∏–∫':
        raspisanie = RUconst.Vt
        raspisanie2 = RUconst.Sr
    if tm == '—Å—Ä–µ–¥–∞':
        raspisanie = RUconst.Sr
        raspisanie2 = RUconst.Che
    if tm == '—á–µ—Ç–≤–µ—Ä–≥':
        raspisanie = RUconst.Che
        raspisanie2 = RUconst.Pt
    if tm == '–ø—è—Ç–Ω–∏—Ü–∞':
        raspisanie = RUconst.Pt
        raspisanie2 = RUconst.Su
    if tm == '—Å—É–±–±–æ—Ç–∞':
        raspisanie = RUconst.Su
        raspisanie2 = RUconst.Vsk
    if tm == '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        raspisanie = RUconst.Vsk
        raspisanie2 = RUconst.Vt


def urok_nomer():
    data_and_vremy()
    global urok, ur
    if (hour == 8) and (0 <= minute <= 40 + 5):
        urok = 1
        ur = RUconst.ur1
    elif ((hour == 8) and (45 < minute <= 59)) or ((hour == 9) and (0 <= minute <= 25 + 15)):
        urok = 2
        ur = RUconst.ur2
    elif ((hour == 9) and (40 < minute <= 59)) or ((hour == 10) and (0 <= minute <= 20 + 15)):
        urok = 3
        ur = RUconst.ur3
    elif ((hour == 10) and (35 < minute <= 59)) or ((hour == 11) and (0 <= minute <= 15 + 15)):
        urok = 4
        ur = RUconst.ur4
    elif ((hour == 11) and (30 < minute <= 59)) or ((hour == 12) and (0 <= minute <= 10 + 5)):
        urok = 5
        ur = RUconst.ur5
    elif (hour == 12) and (15 < minute <= 55 + 4):
        urok = 6
        ur = RUconst.ur6
    elif (hour == 13) and (0 <= minute <= 40 + 5):
        urok = 7
        ur = RUconst.ur7
    else:
        ur = RUconst.ur10
        urok = 0


def scolco_do_konca_v1():
    data_and_vremy()
    konec = 0
    min = hour*60+minute
    if tm != '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
        if urok == 1:
            konec = 520 - min
        elif urok == 2:
            konec = 565 - min
        elif urok == 3:
            konec = 620 - min
        elif urok == 4:
            konec = 675 - min
        elif urok == 5:
            konec = 730 - min
        elif urok == 6:
            konec = 775 - min
        elif urok == 7:
            konec = 820 - min
        else:
            konec = 0
    else:
        konec = 0
        return konec



#///////////////////////////////////////////////////////////////////

@bot.message_handler(commands=['start'])
def start(message):
    sent = bot.send_message(message.chat.id, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    bot.register_next_step_handler(sent, hello)


def hello(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {name}. –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.'.format(name=message.text))
    time.sleep(1)
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('üîî–ó–≤–æ–Ω–∫–∏', 'üìö–£—Ä–æ–∫–∏')
    keyboard.row('üìù–ó–∞–ø–∏—Å–∞—Ç—å –î–ó')
    # keyboard.add(*[telebot.types.KeyboardButton(name) for name in ['–û–ª–∏–º–ø–∏–∞–¥—ã', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']])
    bot.send_message(message.chat.id, '–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def zvonki(message) :
    urok_nomer()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞']])
    keyboard1 = types.InlineKeyboardMarkup()
    keyboard1.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
    keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard2.row('–ß—Ç–æ –∑–∞–¥–∞–ª–∏?', '–ü–æ–º–æ—á—å(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
    keyboard2.row('–ì–î–ó(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)','–ù–∞–∑–∞–¥')
    if message.text == 'üîî–ó–≤–æ–Ω–∫–∏':
         bot.send_message(message.chat.id, '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã</b>\n\n' + ur + '–î–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å ' + str(scolco_do_konca_v1()) + ' –º–∏–Ω—É—Ç.', parse_mode='HTML', reply_markup=keyboard)

    if message.text == '–ù–∞–∑–∞–¥':
            keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row('üîî–ó–≤–æ–Ω–∫–∏', 'üìö–£—Ä–æ–∫–∏')
            keyboard.row('üìù–ó–∞–ø–∏—Å–∞—Ç—å –î–ó')
            # keyboard.add(*[telebot.types.KeyboardButton(name) for name in ['–û–ª–∏–º–ø–∏–∞–¥—ã', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è']])
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?', parse_mode='HTML', reply_markup=keyboard)

    if message.text == 'üìö–£—Ä–æ–∫–∏':
        data_and_vremy()
        bot.send_message(message.chat.id,
                             '<b>' + day + ' ' + month + ' ,' + tm + '</b>\n\n' +
                             raspisanie, parse_mode='HTML', reply_markup= keyboard1)
        bot.send_message(message.chat.id, '...', reply_markup= keyboard2)


@bot.callback_query_handler(func=lambda c: True)
def inline(c):
    urok_nomer()
    data_and_vremy()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞']])
    keyboard1 = types.InlineKeyboardMarkup()
    keyboard1.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞']])
    keyboard2 = types.InlineKeyboardMarkup()
    keyboard2.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ù–∞ —Å–µ–≥–æ–¥–Ω—è']])
    keyboard3 = types.InlineKeyboardMarkup()
    keyboard3.add(*[types.InlineKeyboardButton(text=name, callback_data=name) for name in ['–ù–∞ –∑–∞–≤—Ç—Ä–∞']])
    if c.data == '–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã</b>\n\n' + ur + '–î–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å ' + str(scolco_do_konca_v1()) + ' –º–∏–Ω—É—Ç.', parse_mode='HTML', reply_markup=keyboard1)

    if c.data == '–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –≤—Ç–æ—Ä–æ–π —Å–º–µ–Ω—ã</b>\n\n'
                                       '1. 14:00 - 14:40\n'
                                       '2. 14:50 - 15:30\n'
                                       '3. 15:45 - 16:25\n'
                                       '4. 16:35 - 17:15\n'
                                       '5. 17:25 - 18:05\n'
                                       '6. 18:10 - 18:50\n',
                                  parse_mode='HTML', reply_markup=keyboard)

    if c.data == '–ù–∞ –∑–∞–≤—Ç—Ä–∞':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='<b>' + day + ' ' + month + ' ,' + tm + '</b>\n\n' +
                                  raspisanie2, parse_mode='HTML', reply_markup= keyboard2)

    if c.data == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è':
        bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                  text='<b>' + day + ' ' + month + ' ,' + tm + '</b>\n\n' +
                                  raspisanie, parse_mode='HTML', reply_markup= keyboard3)



bot.polling()
